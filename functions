# -*- mode: Shell-script -*-

##### Functions #####

# 'up [string]' takes you up to a directory that matches /string/
# [blind ~/test#trunk/lib/Test/Module/Notes]$ up trunk
# [blind ~/test#trunk]$
up () {
    cd `perl -MCwd -e '$o=@p=split/\//,cwd;$c++while@p&&pop(@p)!~/$ARGV[0]/;print$c>=$o?".":"../"x$c' $1`
}

# Nice interactive Perl shell
ips () {
    echo 'This is Interactive Perl shell';
    rlwrap -A -pgreen -S"perl> " perl -wnE'say eval()//$@';
}

# 'back 4' takes you up 4 directories.
back ()
{
    x=0
    levels=""
    while [ $x -lt $1 ]
        do
        levels="${levels}../"
        x=$[$x+1]
    done
    cd $levels
}

git_branch () {
    GIT_DIR=`git rev-parse --git-dir 2> /dev/null`
    if [ $? == 0 ]; then
        cut -b 17-37 < ${GIT_DIR}/HEAD
    fi
}

git_add () {
    if [[ $# -gt 0 ]]; then
        # Passed some files to add individually
        git add $@
    else
        # Add everything
        git add -A
    fi
}

short_dir ()
{
    if [ "$PWD" = "$HOME" ]; then
        echo '~'
    else
        the_dir=`dirname "$PWD"`;
        the_base=`basename "$PWD"`;
        the_dir_base=`basename "$the_dir"`;
        if [ "$the_dir_base" = '/' ]; then
            the_dir_base="";
        fi
        echo "$the_dir_base/$the_base"
    fi
}

# This unzips any archive with the correct zip program.
extract () {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2) tar xjf $1    ;;
            *.tar.gz)  tar xzf $1    ;;
            *.bz2)     bunzip2 $1    ;;
            *.rar)     unrar x $1    ;;
            *.gz)      gunzip $1     ;;
            *.tar)     tar xf $1     ;;
            *.tbz2)    tar xjf $1    ;;
            *.tgz)     tar xzf $1    ;;
            *.zip)     unzip $1      ;;
            *.Z)       uncompress $1 ;;
            *.7z)      7zr e $1      ;;
            *)         echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

# If `tree` isn't installed, use this custom function
if [ -z "\${which tree}" ]; then
  tree () {
      find $@ -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'
  }
fi

# Make a dir and cd into it
mcd () {
    mkdir -p "$@" && cd "$@"
}

emacs_mine () {
    server_flag=$1
    file=$2

    # If the file is a Perl module path (Example::Module::Path), then
    # prepend 'lib/', replace :: with /, and append '.pm'.
    if [[ $file == *"::"* ]]; then
        file=lib/$(module_to_path $file)

        # If this is a test module, look in the t/ library files. Note, using
        # regex-matching here (=~) causes zshell tab completion to crash.
        if [[ $file == *"/Test/"* || $file == *"/Test.pm" ]]; then
            file=t/$file
        fi
    fi

    if [[ "$server_flag" == "--no-server" ]]; then
        emacs $file
    elif [[ "$server_flag" == "--server" ]]; then
        emacsclient -t $file
    else
        echo 'no server flag passed'
        return 1
    fi
}

# Converts a Perl module string to a path. Does nothing if the module is already
# a path. The first parameter is the module string. The second parameter is a
# string that will be prepended to the resulting path ONLY IF the first
# parameter was a module and not already a path.
#
# $(module_to_path "Some::Example::Module" lib/)
#     => "lib/Some/Example/Module.pm"
#
# $(module_to_path "bin/test.pl" lib/)
#     => "bin/test.pl"
#
module_to_path() {
    if [[ $1 == *"::"* ]]; then
        echo $2${1//::/\/}.pm
    else
        echo $1
    fi
}
